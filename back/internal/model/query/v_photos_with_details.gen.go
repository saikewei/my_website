// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/saikewei/my_website/back/internal/model"
)

func newVPhotosWithDetail(db *gorm.DB, opts ...gen.DOOption) vPhotosWithDetail {
	_vPhotosWithDetail := vPhotosWithDetail{}

	_vPhotosWithDetail.vPhotosWithDetailDo.UseDB(db, opts...)
	_vPhotosWithDetail.vPhotosWithDetailDo.UseModel(&model.VPhotosWithDetail{})

	tableName := _vPhotosWithDetail.vPhotosWithDetailDo.TableName()
	_vPhotosWithDetail.ALL = field.NewAsterisk(tableName)
	_vPhotosWithDetail.ID = field.NewInt32(tableName, "id")
	_vPhotosWithDetail.AlbumID = field.NewInt32(tableName, "album_id")
	_vPhotosWithDetail.Title = field.NewString(tableName, "title")
	_vPhotosWithDetail.Description = field.NewString(tableName, "description")
	_vPhotosWithDetail.FilePath = field.NewString(tableName, "file_path")
	_vPhotosWithDetail.FileName = field.NewString(tableName, "file_name")
	_vPhotosWithDetail.FileSize = field.NewInt32(tableName, "file_size")
	_vPhotosWithDetail.Width = field.NewInt32(tableName, "width")
	_vPhotosWithDetail.Height = field.NewInt32(tableName, "height")
	_vPhotosWithDetail.IsFeatured = field.NewBool(tableName, "is_featured")
	_vPhotosWithDetail.ShotAt = field.NewTime(tableName, "shot_at")
	_vPhotosWithDetail.CreatedAt = field.NewTime(tableName, "created_at")
	_vPhotosWithDetail.UpdatedAt = field.NewTime(tableName, "updated_at")
	_vPhotosWithDetail.Camera = field.NewString(tableName, "camera")
	_vPhotosWithDetail.Lens = field.NewString(tableName, "lens")
	_vPhotosWithDetail.FocalLength = field.NewString(tableName, "focal_length")
	_vPhotosWithDetail.Aperture = field.NewString(tableName, "aperture")
	_vPhotosWithDetail.ShutterSpeed = field.NewString(tableName, "shutter_speed")
	_vPhotosWithDetail.Iso = field.NewString(tableName, "iso")
	_vPhotosWithDetail.ExposureBias = field.NewString(tableName, "exposure_bias")
	_vPhotosWithDetail.FlashFired = field.NewBool(tableName, "flash_fired")
	_vPhotosWithDetail.GpsLatitude = field.NewFloat64(tableName, "gps_latitude")
	_vPhotosWithDetail.GpsLongitude = field.NewFloat64(tableName, "gps_longitude")
	_vPhotosWithDetail.Tags = field.NewString(tableName, "tags")

	_vPhotosWithDetail.fillFieldMap()

	return _vPhotosWithDetail
}

// vPhotosWithDetail VIEW
type vPhotosWithDetail struct {
	vPhotosWithDetailDo

	ALL          field.Asterisk
	ID           field.Int32
	AlbumID      field.Int32  // 所属相册ID, 关联albums.id (可以为空, 代表未分类)
	Title        field.String // 照片标题
	Description  field.String // 照片描述或背后的故事
	FilePath     field.String // 文件存储路径 (例如: /uploads/2024/09/your-photo.jpg)
	FileName     field.String // 原始文件名
	FileSize     field.Int32  // 文件大小 (Bytes)
	Width        field.Int32  // 图片宽度 (px)
	Height       field.Int32  // 图片高度 (px)
	IsFeatured   field.Bool   // 是否为精选照片
	ShotAt       field.Time   // 拍摄时间
	CreatedAt    field.Time
	UpdatedAt    field.Time
	Camera       field.String  // 相机
	Lens         field.String  // 镜头
	FocalLength  field.String  // 焦距 (例如: 85mm)
	Aperture     field.String  // 光圈 (例如: f/1.8)
	ShutterSpeed field.String  // 快门速度 (例如: 1/1000s)
	Iso          field.String  // ISO感光度 (例如: 100)
	ExposureBias field.String  // 曝光补偿 (例如: +0.7 EV)
	FlashFired   field.Bool    // 是否使用闪光灯
	GpsLatitude  field.Float64 // GPS纬度
	GpsLongitude field.Float64 // GPS经度
	Tags         field.String

	fieldMap map[string]field.Expr
}

func (v vPhotosWithDetail) Table(newTableName string) *vPhotosWithDetail {
	v.vPhotosWithDetailDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vPhotosWithDetail) As(alias string) *vPhotosWithDetail {
	v.vPhotosWithDetailDo.DO = *(v.vPhotosWithDetailDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vPhotosWithDetail) updateTableName(table string) *vPhotosWithDetail {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt32(table, "id")
	v.AlbumID = field.NewInt32(table, "album_id")
	v.Title = field.NewString(table, "title")
	v.Description = field.NewString(table, "description")
	v.FilePath = field.NewString(table, "file_path")
	v.FileName = field.NewString(table, "file_name")
	v.FileSize = field.NewInt32(table, "file_size")
	v.Width = field.NewInt32(table, "width")
	v.Height = field.NewInt32(table, "height")
	v.IsFeatured = field.NewBool(table, "is_featured")
	v.ShotAt = field.NewTime(table, "shot_at")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.Camera = field.NewString(table, "camera")
	v.Lens = field.NewString(table, "lens")
	v.FocalLength = field.NewString(table, "focal_length")
	v.Aperture = field.NewString(table, "aperture")
	v.ShutterSpeed = field.NewString(table, "shutter_speed")
	v.Iso = field.NewString(table, "iso")
	v.ExposureBias = field.NewString(table, "exposure_bias")
	v.FlashFired = field.NewBool(table, "flash_fired")
	v.GpsLatitude = field.NewFloat64(table, "gps_latitude")
	v.GpsLongitude = field.NewFloat64(table, "gps_longitude")
	v.Tags = field.NewString(table, "tags")

	v.fillFieldMap()

	return v
}

func (v *vPhotosWithDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vPhotosWithDetail) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 24)
	v.fieldMap["id"] = v.ID
	v.fieldMap["album_id"] = v.AlbumID
	v.fieldMap["title"] = v.Title
	v.fieldMap["description"] = v.Description
	v.fieldMap["file_path"] = v.FilePath
	v.fieldMap["file_name"] = v.FileName
	v.fieldMap["file_size"] = v.FileSize
	v.fieldMap["width"] = v.Width
	v.fieldMap["height"] = v.Height
	v.fieldMap["is_featured"] = v.IsFeatured
	v.fieldMap["shot_at"] = v.ShotAt
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["camera"] = v.Camera
	v.fieldMap["lens"] = v.Lens
	v.fieldMap["focal_length"] = v.FocalLength
	v.fieldMap["aperture"] = v.Aperture
	v.fieldMap["shutter_speed"] = v.ShutterSpeed
	v.fieldMap["iso"] = v.Iso
	v.fieldMap["exposure_bias"] = v.ExposureBias
	v.fieldMap["flash_fired"] = v.FlashFired
	v.fieldMap["gps_latitude"] = v.GpsLatitude
	v.fieldMap["gps_longitude"] = v.GpsLongitude
	v.fieldMap["tags"] = v.Tags
}

func (v vPhotosWithDetail) clone(db *gorm.DB) vPhotosWithDetail {
	v.vPhotosWithDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vPhotosWithDetail) replaceDB(db *gorm.DB) vPhotosWithDetail {
	v.vPhotosWithDetailDo.ReplaceDB(db)
	return v
}

type vPhotosWithDetailDo struct{ gen.DO }

func (v vPhotosWithDetailDo) Debug() *vPhotosWithDetailDo {
	return v.withDO(v.DO.Debug())
}

func (v vPhotosWithDetailDo) WithContext(ctx context.Context) *vPhotosWithDetailDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vPhotosWithDetailDo) ReadDB() *vPhotosWithDetailDo {
	return v.Clauses(dbresolver.Read)
}

func (v vPhotosWithDetailDo) WriteDB() *vPhotosWithDetailDo {
	return v.Clauses(dbresolver.Write)
}

func (v vPhotosWithDetailDo) Session(config *gorm.Session) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Session(config))
}

func (v vPhotosWithDetailDo) Clauses(conds ...clause.Expression) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vPhotosWithDetailDo) Returning(value interface{}, columns ...string) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vPhotosWithDetailDo) Not(conds ...gen.Condition) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vPhotosWithDetailDo) Or(conds ...gen.Condition) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vPhotosWithDetailDo) Select(conds ...field.Expr) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vPhotosWithDetailDo) Where(conds ...gen.Condition) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vPhotosWithDetailDo) Order(conds ...field.Expr) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vPhotosWithDetailDo) Distinct(cols ...field.Expr) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vPhotosWithDetailDo) Omit(cols ...field.Expr) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vPhotosWithDetailDo) Join(table schema.Tabler, on ...field.Expr) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vPhotosWithDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) *vPhotosWithDetailDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vPhotosWithDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) *vPhotosWithDetailDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vPhotosWithDetailDo) Group(cols ...field.Expr) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vPhotosWithDetailDo) Having(conds ...gen.Condition) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vPhotosWithDetailDo) Limit(limit int) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vPhotosWithDetailDo) Offset(offset int) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vPhotosWithDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vPhotosWithDetailDo) Unscoped() *vPhotosWithDetailDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vPhotosWithDetailDo) Create(values ...*model.VPhotosWithDetail) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vPhotosWithDetailDo) CreateInBatches(values []*model.VPhotosWithDetail, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vPhotosWithDetailDo) Save(values ...*model.VPhotosWithDetail) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vPhotosWithDetailDo) First() (*model.VPhotosWithDetail, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VPhotosWithDetail), nil
	}
}

func (v vPhotosWithDetailDo) Take() (*model.VPhotosWithDetail, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VPhotosWithDetail), nil
	}
}

func (v vPhotosWithDetailDo) Last() (*model.VPhotosWithDetail, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VPhotosWithDetail), nil
	}
}

func (v vPhotosWithDetailDo) Find() ([]*model.VPhotosWithDetail, error) {
	result, err := v.DO.Find()
	return result.([]*model.VPhotosWithDetail), err
}

func (v vPhotosWithDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VPhotosWithDetail, err error) {
	buf := make([]*model.VPhotosWithDetail, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vPhotosWithDetailDo) FindInBatches(result *[]*model.VPhotosWithDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vPhotosWithDetailDo) Attrs(attrs ...field.AssignExpr) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vPhotosWithDetailDo) Assign(attrs ...field.AssignExpr) *vPhotosWithDetailDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vPhotosWithDetailDo) Joins(fields ...field.RelationField) *vPhotosWithDetailDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vPhotosWithDetailDo) Preload(fields ...field.RelationField) *vPhotosWithDetailDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vPhotosWithDetailDo) FirstOrInit() (*model.VPhotosWithDetail, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VPhotosWithDetail), nil
	}
}

func (v vPhotosWithDetailDo) FirstOrCreate() (*model.VPhotosWithDetail, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VPhotosWithDetail), nil
	}
}

func (v vPhotosWithDetailDo) FindByPage(offset int, limit int) (result []*model.VPhotosWithDetail, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vPhotosWithDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vPhotosWithDetailDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vPhotosWithDetailDo) Delete(models ...*model.VPhotosWithDetail) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vPhotosWithDetailDo) withDO(do gen.Dao) *vPhotosWithDetailDo {
	v.DO = *do.(*gen.DO)
	return v
}
