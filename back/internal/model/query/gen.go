// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                 = new(Query)
	Album             *album
	Photo             *photo
	PhotoMetadatum    *photoMetadatum
	PhotoTag          *photoTag
	SystemPassword    *systemPassword
	Tag               *tag
	VPhotosWithDetail *vPhotosWithDetail
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Album = &Q.Album
	Photo = &Q.Photo
	PhotoMetadatum = &Q.PhotoMetadatum
	PhotoTag = &Q.PhotoTag
	SystemPassword = &Q.SystemPassword
	Tag = &Q.Tag
	VPhotosWithDetail = &Q.VPhotosWithDetail
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                db,
		Album:             newAlbum(db, opts...),
		Photo:             newPhoto(db, opts...),
		PhotoMetadatum:    newPhotoMetadatum(db, opts...),
		PhotoTag:          newPhotoTag(db, opts...),
		SystemPassword:    newSystemPassword(db, opts...),
		Tag:               newTag(db, opts...),
		VPhotosWithDetail: newVPhotosWithDetail(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Album             album
	Photo             photo
	PhotoMetadatum    photoMetadatum
	PhotoTag          photoTag
	SystemPassword    systemPassword
	Tag               tag
	VPhotosWithDetail vPhotosWithDetail
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		Album:             q.Album.clone(db),
		Photo:             q.Photo.clone(db),
		PhotoMetadatum:    q.PhotoMetadatum.clone(db),
		PhotoTag:          q.PhotoTag.clone(db),
		SystemPassword:    q.SystemPassword.clone(db),
		Tag:               q.Tag.clone(db),
		VPhotosWithDetail: q.VPhotosWithDetail.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		Album:             q.Album.replaceDB(db),
		Photo:             q.Photo.replaceDB(db),
		PhotoMetadatum:    q.PhotoMetadatum.replaceDB(db),
		PhotoTag:          q.PhotoTag.replaceDB(db),
		SystemPassword:    q.SystemPassword.replaceDB(db),
		Tag:               q.Tag.replaceDB(db),
		VPhotosWithDetail: q.VPhotosWithDetail.replaceDB(db),
	}
}

type queryCtx struct {
	Album             *albumDo
	Photo             *photoDo
	PhotoMetadatum    *photoMetadatumDo
	PhotoTag          *photoTagDo
	SystemPassword    *systemPasswordDo
	Tag               *tagDo
	VPhotosWithDetail *vPhotosWithDetailDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Album:             q.Album.WithContext(ctx),
		Photo:             q.Photo.WithContext(ctx),
		PhotoMetadatum:    q.PhotoMetadatum.WithContext(ctx),
		PhotoTag:          q.PhotoTag.WithContext(ctx),
		SystemPassword:    q.SystemPassword.WithContext(ctx),
		Tag:               q.Tag.WithContext(ctx),
		VPhotosWithDetail: q.VPhotosWithDetail.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
