// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/saikewei/my_website/back/internal/model"
)

func newSystemPassword(db *gorm.DB, opts ...gen.DOOption) systemPassword {
	_systemPassword := systemPassword{}

	_systemPassword.systemPasswordDo.UseDB(db, opts...)
	_systemPassword.systemPasswordDo.UseModel(&model.SystemPassword{})

	tableName := _systemPassword.systemPasswordDo.TableName()
	_systemPassword.ALL = field.NewAsterisk(tableName)
	_systemPassword.ID = field.NewInt32(tableName, "id")
	_systemPassword.PasswordHash = field.NewString(tableName, "password_hash")
	_systemPassword.UpdatedAt = field.NewTime(tableName, "updated_at")

	_systemPassword.fillFieldMap()

	return _systemPassword
}

// systemPassword Stores the single system password
type systemPassword struct {
	systemPasswordDo

	ALL          field.Asterisk
	ID           field.Int32
	PasswordHash field.String // Hashed password using bcrypt
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (s systemPassword) Table(newTableName string) *systemPassword {
	s.systemPasswordDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemPassword) As(alias string) *systemPassword {
	s.systemPasswordDo.DO = *(s.systemPasswordDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemPassword) updateTableName(table string) *systemPassword {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.PasswordHash = field.NewString(table, "password_hash")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *systemPassword) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemPassword) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["id"] = s.ID
	s.fieldMap["password_hash"] = s.PasswordHash
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s systemPassword) clone(db *gorm.DB) systemPassword {
	s.systemPasswordDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s systemPassword) replaceDB(db *gorm.DB) systemPassword {
	s.systemPasswordDo.ReplaceDB(db)
	return s
}

type systemPasswordDo struct{ gen.DO }

func (s systemPasswordDo) Debug() *systemPasswordDo {
	return s.withDO(s.DO.Debug())
}

func (s systemPasswordDo) WithContext(ctx context.Context) *systemPasswordDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemPasswordDo) ReadDB() *systemPasswordDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemPasswordDo) WriteDB() *systemPasswordDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemPasswordDo) Session(config *gorm.Session) *systemPasswordDo {
	return s.withDO(s.DO.Session(config))
}

func (s systemPasswordDo) Clauses(conds ...clause.Expression) *systemPasswordDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemPasswordDo) Returning(value interface{}, columns ...string) *systemPasswordDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemPasswordDo) Not(conds ...gen.Condition) *systemPasswordDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemPasswordDo) Or(conds ...gen.Condition) *systemPasswordDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemPasswordDo) Select(conds ...field.Expr) *systemPasswordDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemPasswordDo) Where(conds ...gen.Condition) *systemPasswordDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemPasswordDo) Order(conds ...field.Expr) *systemPasswordDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemPasswordDo) Distinct(cols ...field.Expr) *systemPasswordDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemPasswordDo) Omit(cols ...field.Expr) *systemPasswordDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemPasswordDo) Join(table schema.Tabler, on ...field.Expr) *systemPasswordDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemPasswordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *systemPasswordDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemPasswordDo) RightJoin(table schema.Tabler, on ...field.Expr) *systemPasswordDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemPasswordDo) Group(cols ...field.Expr) *systemPasswordDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemPasswordDo) Having(conds ...gen.Condition) *systemPasswordDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemPasswordDo) Limit(limit int) *systemPasswordDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemPasswordDo) Offset(offset int) *systemPasswordDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemPasswordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *systemPasswordDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemPasswordDo) Unscoped() *systemPasswordDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemPasswordDo) Create(values ...*model.SystemPassword) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemPasswordDo) CreateInBatches(values []*model.SystemPassword, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemPasswordDo) Save(values ...*model.SystemPassword) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemPasswordDo) First() (*model.SystemPassword, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemPassword), nil
	}
}

func (s systemPasswordDo) Take() (*model.SystemPassword, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemPassword), nil
	}
}

func (s systemPasswordDo) Last() (*model.SystemPassword, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemPassword), nil
	}
}

func (s systemPasswordDo) Find() ([]*model.SystemPassword, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemPassword), err
}

func (s systemPasswordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemPassword, err error) {
	buf := make([]*model.SystemPassword, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemPasswordDo) FindInBatches(result *[]*model.SystemPassword, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemPasswordDo) Attrs(attrs ...field.AssignExpr) *systemPasswordDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemPasswordDo) Assign(attrs ...field.AssignExpr) *systemPasswordDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemPasswordDo) Joins(fields ...field.RelationField) *systemPasswordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemPasswordDo) Preload(fields ...field.RelationField) *systemPasswordDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemPasswordDo) FirstOrInit() (*model.SystemPassword, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemPassword), nil
	}
}

func (s systemPasswordDo) FirstOrCreate() (*model.SystemPassword, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemPassword), nil
	}
}

func (s systemPasswordDo) FindByPage(offset int, limit int) (result []*model.SystemPassword, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemPasswordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemPasswordDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemPasswordDo) Delete(models ...*model.SystemPassword) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemPasswordDo) withDO(do gen.Dao) *systemPasswordDo {
	s.DO = *do.(*gen.DO)
	return s
}
