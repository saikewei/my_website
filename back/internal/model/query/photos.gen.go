// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/saikewei/my_website/back/internal/model"
)

func newPhoto(db *gorm.DB, opts ...gen.DOOption) photo {
	_photo := photo{}

	_photo.photoDo.UseDB(db, opts...)
	_photo.photoDo.UseModel(&model.Photo{})

	tableName := _photo.photoDo.TableName()
	_photo.ALL = field.NewAsterisk(tableName)
	_photo.ID = field.NewInt32(tableName, "id")
	_photo.AlbumID = field.NewInt32(tableName, "album_id")
	_photo.Title = field.NewString(tableName, "title")
	_photo.Description = field.NewString(tableName, "description")
	_photo.FilePath = field.NewString(tableName, "file_path")
	_photo.FileName = field.NewString(tableName, "file_name")
	_photo.FileSize = field.NewInt32(tableName, "file_size")
	_photo.Width = field.NewInt32(tableName, "width")
	_photo.Height = field.NewInt32(tableName, "height")
	_photo.IsFeatured = field.NewBool(tableName, "is_featured")
	_photo.ShotAt = field.NewTime(tableName, "shot_at")
	_photo.CreatedAt = field.NewTime(tableName, "created_at")
	_photo.UpdatedAt = field.NewTime(tableName, "updated_at")

	_photo.fillFieldMap()

	return _photo
}

type photo struct {
	photoDo

	ALL         field.Asterisk
	ID          field.Int32
	AlbumID     field.Int32  // 所属相册ID, 关联albums.id (可以为空, 代表未分类)
	Title       field.String // 照片标题
	Description field.String // 照片描述或背后的故事
	FilePath    field.String // 文件存储路径 (例如: /uploads/2024/09/your-photo.jpg)
	FileName    field.String // 原始文件名
	FileSize    field.Int32  // 文件大小 (Bytes)
	Width       field.Int32  // 图片宽度 (px)
	Height      field.Int32  // 图片高度 (px)
	IsFeatured  field.Bool   // 是否为精选照片
	ShotAt      field.Time   // 拍摄时间
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (p photo) Table(newTableName string) *photo {
	p.photoDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p photo) As(alias string) *photo {
	p.photoDo.DO = *(p.photoDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *photo) updateTableName(table string) *photo {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.AlbumID = field.NewInt32(table, "album_id")
	p.Title = field.NewString(table, "title")
	p.Description = field.NewString(table, "description")
	p.FilePath = field.NewString(table, "file_path")
	p.FileName = field.NewString(table, "file_name")
	p.FileSize = field.NewInt32(table, "file_size")
	p.Width = field.NewInt32(table, "width")
	p.Height = field.NewInt32(table, "height")
	p.IsFeatured = field.NewBool(table, "is_featured")
	p.ShotAt = field.NewTime(table, "shot_at")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")

	p.fillFieldMap()

	return p
}

func (p *photo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *photo) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 13)
	p.fieldMap["id"] = p.ID
	p.fieldMap["album_id"] = p.AlbumID
	p.fieldMap["title"] = p.Title
	p.fieldMap["description"] = p.Description
	p.fieldMap["file_path"] = p.FilePath
	p.fieldMap["file_name"] = p.FileName
	p.fieldMap["file_size"] = p.FileSize
	p.fieldMap["width"] = p.Width
	p.fieldMap["height"] = p.Height
	p.fieldMap["is_featured"] = p.IsFeatured
	p.fieldMap["shot_at"] = p.ShotAt
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
}

func (p photo) clone(db *gorm.DB) photo {
	p.photoDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p photo) replaceDB(db *gorm.DB) photo {
	p.photoDo.ReplaceDB(db)
	return p
}

type photoDo struct{ gen.DO }

func (p photoDo) Debug() *photoDo {
	return p.withDO(p.DO.Debug())
}

func (p photoDo) WithContext(ctx context.Context) *photoDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p photoDo) ReadDB() *photoDo {
	return p.Clauses(dbresolver.Read)
}

func (p photoDo) WriteDB() *photoDo {
	return p.Clauses(dbresolver.Write)
}

func (p photoDo) Session(config *gorm.Session) *photoDo {
	return p.withDO(p.DO.Session(config))
}

func (p photoDo) Clauses(conds ...clause.Expression) *photoDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p photoDo) Returning(value interface{}, columns ...string) *photoDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p photoDo) Not(conds ...gen.Condition) *photoDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p photoDo) Or(conds ...gen.Condition) *photoDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p photoDo) Select(conds ...field.Expr) *photoDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p photoDo) Where(conds ...gen.Condition) *photoDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p photoDo) Order(conds ...field.Expr) *photoDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p photoDo) Distinct(cols ...field.Expr) *photoDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p photoDo) Omit(cols ...field.Expr) *photoDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p photoDo) Join(table schema.Tabler, on ...field.Expr) *photoDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p photoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *photoDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p photoDo) RightJoin(table schema.Tabler, on ...field.Expr) *photoDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p photoDo) Group(cols ...field.Expr) *photoDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p photoDo) Having(conds ...gen.Condition) *photoDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p photoDo) Limit(limit int) *photoDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p photoDo) Offset(offset int) *photoDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p photoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *photoDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p photoDo) Unscoped() *photoDo {
	return p.withDO(p.DO.Unscoped())
}

func (p photoDo) Create(values ...*model.Photo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p photoDo) CreateInBatches(values []*model.Photo, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p photoDo) Save(values ...*model.Photo) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p photoDo) First() (*model.Photo, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Photo), nil
	}
}

func (p photoDo) Take() (*model.Photo, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Photo), nil
	}
}

func (p photoDo) Last() (*model.Photo, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Photo), nil
	}
}

func (p photoDo) Find() ([]*model.Photo, error) {
	result, err := p.DO.Find()
	return result.([]*model.Photo), err
}

func (p photoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Photo, err error) {
	buf := make([]*model.Photo, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p photoDo) FindInBatches(result *[]*model.Photo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p photoDo) Attrs(attrs ...field.AssignExpr) *photoDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p photoDo) Assign(attrs ...field.AssignExpr) *photoDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p photoDo) Joins(fields ...field.RelationField) *photoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p photoDo) Preload(fields ...field.RelationField) *photoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p photoDo) FirstOrInit() (*model.Photo, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Photo), nil
	}
}

func (p photoDo) FirstOrCreate() (*model.Photo, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Photo), nil
	}
}

func (p photoDo) FindByPage(offset int, limit int) (result []*model.Photo, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p photoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p photoDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p photoDo) Delete(models ...*model.Photo) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *photoDo) withDO(do gen.Dao) *photoDo {
	p.DO = *do.(*gen.DO)
	return p
}
