// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/saikewei/my_website/back/internal/model"
)

func newPhotoMetadatum(db *gorm.DB, opts ...gen.DOOption) photoMetadatum {
	_photoMetadatum := photoMetadatum{}

	_photoMetadatum.photoMetadatumDo.UseDB(db, opts...)
	_photoMetadatum.photoMetadatumDo.UseModel(&model.PhotoMetadatum{})

	tableName := _photoMetadatum.photoMetadatumDo.TableName()
	_photoMetadatum.ALL = field.NewAsterisk(tableName)
	_photoMetadatum.PhotoID = field.NewInt32(tableName, "photo_id")
	_photoMetadatum.CameraID = field.NewInt32(tableName, "camera_id")
	_photoMetadatum.LensID = field.NewInt32(tableName, "lens_id")
	_photoMetadatum.FocalLength = field.NewString(tableName, "focal_length")
	_photoMetadatum.Aperture = field.NewString(tableName, "aperture")
	_photoMetadatum.ShutterSpeed = field.NewString(tableName, "shutter_speed")
	_photoMetadatum.Iso = field.NewString(tableName, "iso")
	_photoMetadatum.ExposureBias = field.NewString(tableName, "exposure_bias")
	_photoMetadatum.FlashFired = field.NewBool(tableName, "flash_fired")
	_photoMetadatum.GpsLatitude = field.NewFloat64(tableName, "gps_latitude")
	_photoMetadatum.GpsLongitude = field.NewFloat64(tableName, "gps_longitude")

	_photoMetadatum.fillFieldMap()

	return _photoMetadatum
}

type photoMetadatum struct {
	photoMetadatumDo

	ALL          field.Asterisk
	PhotoID      field.Int32
	CameraID     field.Int32   // 相机ID, 关联cameras.id
	LensID       field.Int32   // 镜头ID, 关联lenses.id
	FocalLength  field.String  // 焦距 (例如: 85mm)
	Aperture     field.String  // 光圈 (例如: f/1.8)
	ShutterSpeed field.String  // 快门速度 (例如: 1/1000s)
	Iso          field.String  // ISO感光度 (例如: 100)
	ExposureBias field.String  // 曝光补偿 (例如: +0.7 EV)
	FlashFired   field.Bool    // 是否使用闪光灯
	GpsLatitude  field.Float64 // GPS纬度
	GpsLongitude field.Float64 // GPS经度

	fieldMap map[string]field.Expr
}

func (p photoMetadatum) Table(newTableName string) *photoMetadatum {
	p.photoMetadatumDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p photoMetadatum) As(alias string) *photoMetadatum {
	p.photoMetadatumDo.DO = *(p.photoMetadatumDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *photoMetadatum) updateTableName(table string) *photoMetadatum {
	p.ALL = field.NewAsterisk(table)
	p.PhotoID = field.NewInt32(table, "photo_id")
	p.CameraID = field.NewInt32(table, "camera_id")
	p.LensID = field.NewInt32(table, "lens_id")
	p.FocalLength = field.NewString(table, "focal_length")
	p.Aperture = field.NewString(table, "aperture")
	p.ShutterSpeed = field.NewString(table, "shutter_speed")
	p.Iso = field.NewString(table, "iso")
	p.ExposureBias = field.NewString(table, "exposure_bias")
	p.FlashFired = field.NewBool(table, "flash_fired")
	p.GpsLatitude = field.NewFloat64(table, "gps_latitude")
	p.GpsLongitude = field.NewFloat64(table, "gps_longitude")

	p.fillFieldMap()

	return p
}

func (p *photoMetadatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *photoMetadatum) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 11)
	p.fieldMap["photo_id"] = p.PhotoID
	p.fieldMap["camera_id"] = p.CameraID
	p.fieldMap["lens_id"] = p.LensID
	p.fieldMap["focal_length"] = p.FocalLength
	p.fieldMap["aperture"] = p.Aperture
	p.fieldMap["shutter_speed"] = p.ShutterSpeed
	p.fieldMap["iso"] = p.Iso
	p.fieldMap["exposure_bias"] = p.ExposureBias
	p.fieldMap["flash_fired"] = p.FlashFired
	p.fieldMap["gps_latitude"] = p.GpsLatitude
	p.fieldMap["gps_longitude"] = p.GpsLongitude
}

func (p photoMetadatum) clone(db *gorm.DB) photoMetadatum {
	p.photoMetadatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p photoMetadatum) replaceDB(db *gorm.DB) photoMetadatum {
	p.photoMetadatumDo.ReplaceDB(db)
	return p
}

type photoMetadatumDo struct{ gen.DO }

func (p photoMetadatumDo) Debug() *photoMetadatumDo {
	return p.withDO(p.DO.Debug())
}

func (p photoMetadatumDo) WithContext(ctx context.Context) *photoMetadatumDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p photoMetadatumDo) ReadDB() *photoMetadatumDo {
	return p.Clauses(dbresolver.Read)
}

func (p photoMetadatumDo) WriteDB() *photoMetadatumDo {
	return p.Clauses(dbresolver.Write)
}

func (p photoMetadatumDo) Session(config *gorm.Session) *photoMetadatumDo {
	return p.withDO(p.DO.Session(config))
}

func (p photoMetadatumDo) Clauses(conds ...clause.Expression) *photoMetadatumDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p photoMetadatumDo) Returning(value interface{}, columns ...string) *photoMetadatumDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p photoMetadatumDo) Not(conds ...gen.Condition) *photoMetadatumDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p photoMetadatumDo) Or(conds ...gen.Condition) *photoMetadatumDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p photoMetadatumDo) Select(conds ...field.Expr) *photoMetadatumDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p photoMetadatumDo) Where(conds ...gen.Condition) *photoMetadatumDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p photoMetadatumDo) Order(conds ...field.Expr) *photoMetadatumDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p photoMetadatumDo) Distinct(cols ...field.Expr) *photoMetadatumDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p photoMetadatumDo) Omit(cols ...field.Expr) *photoMetadatumDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p photoMetadatumDo) Join(table schema.Tabler, on ...field.Expr) *photoMetadatumDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p photoMetadatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) *photoMetadatumDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p photoMetadatumDo) RightJoin(table schema.Tabler, on ...field.Expr) *photoMetadatumDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p photoMetadatumDo) Group(cols ...field.Expr) *photoMetadatumDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p photoMetadatumDo) Having(conds ...gen.Condition) *photoMetadatumDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p photoMetadatumDo) Limit(limit int) *photoMetadatumDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p photoMetadatumDo) Offset(offset int) *photoMetadatumDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p photoMetadatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *photoMetadatumDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p photoMetadatumDo) Unscoped() *photoMetadatumDo {
	return p.withDO(p.DO.Unscoped())
}

func (p photoMetadatumDo) Create(values ...*model.PhotoMetadatum) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p photoMetadatumDo) CreateInBatches(values []*model.PhotoMetadatum, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p photoMetadatumDo) Save(values ...*model.PhotoMetadatum) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p photoMetadatumDo) First() (*model.PhotoMetadatum, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PhotoMetadatum), nil
	}
}

func (p photoMetadatumDo) Take() (*model.PhotoMetadatum, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PhotoMetadatum), nil
	}
}

func (p photoMetadatumDo) Last() (*model.PhotoMetadatum, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PhotoMetadatum), nil
	}
}

func (p photoMetadatumDo) Find() ([]*model.PhotoMetadatum, error) {
	result, err := p.DO.Find()
	return result.([]*model.PhotoMetadatum), err
}

func (p photoMetadatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PhotoMetadatum, err error) {
	buf := make([]*model.PhotoMetadatum, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p photoMetadatumDo) FindInBatches(result *[]*model.PhotoMetadatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p photoMetadatumDo) Attrs(attrs ...field.AssignExpr) *photoMetadatumDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p photoMetadatumDo) Assign(attrs ...field.AssignExpr) *photoMetadatumDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p photoMetadatumDo) Joins(fields ...field.RelationField) *photoMetadatumDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p photoMetadatumDo) Preload(fields ...field.RelationField) *photoMetadatumDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p photoMetadatumDo) FirstOrInit() (*model.PhotoMetadatum, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PhotoMetadatum), nil
	}
}

func (p photoMetadatumDo) FirstOrCreate() (*model.PhotoMetadatum, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PhotoMetadatum), nil
	}
}

func (p photoMetadatumDo) FindByPage(offset int, limit int) (result []*model.PhotoMetadatum, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p photoMetadatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p photoMetadatumDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p photoMetadatumDo) Delete(models ...*model.PhotoMetadatum) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *photoMetadatumDo) withDO(do gen.Dao) *photoMetadatumDo {
	p.DO = *do.(*gen.DO)
	return p
}
